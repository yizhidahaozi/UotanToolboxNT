name: Build Windows

on:
  workflow_dispatch:
    inputs:
      VERSION:
        description: 'Version'
        required: true
      BINARY_BRANCH:
        description: 'Binary branch'
        required: true
      NEED_NUPKG:
        description: 'Use self nupkg'
        type: boolean
        required: true
        default: false

jobs:
  windows-zip:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 必须获取完整的Git历史才能创建标签

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: Download NuGet package
      if: ${{ inputs.NEED_NUPKG }}
      run: | 
        Invoke-WebRequest -Uri https://github.com/Uotan-Dev/SukiUI-Uotan/releases/download/v6.0.0/SukiUI.6.0.0.nupkg -OutFile SukiUI.6.0.0.nupkg
        dotnet nuget add source "D:\a\UotanToolboxNT\UotanToolboxNT"
        nuget add SukiUI.6.0.0.nupkg -Source D:\a\UotanToolboxNT\UotanToolboxNT

    - name: Clone Binary
      run: git clone https://github.com/Uotan-Dev/UotanToolboxNT.Binary.git -b ${{ inputs.BINARY_BRANCH }}

    - name: Build
      run: |
        dotnet publish -r win-x64 --self-contained true -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true -o ./publish-x64
        dotnet publish -r win-arm64 --self-contained true -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true -o ./publish-arm64

    - name: Make zip-x64
      run: |
        xcopy ./UotanToolboxNT.Binary/Windows\* ./publish-x64 /e
        7z a -tzip UotanToolbox_Windows_x64_${{ inputs.VERSION }}.zip -mx=9 -m0=lzma -md=64m -mfb=64 ./publish-x64

    - name: Make zip-arm64
      run: |
        xcopy ./UotanToolboxNT.Binary/Windows\* ./publish-arm64 /e
        7z a -tzip UotanToolbox_Windows_arm64_${{ inputs.VERSION }}.zip -mx=9 -m0=lzma -md=64m -mfb=64 ./publish-arm64

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: Windows-Package
        path: ./UotanToolbox_Windows*

    - name: Create Git tag
      id: create_tag
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        
        # 检查标签是否已存在
        if git rev-parse v${{ inputs.VERSION }} >/dev/null 2>&1; then
          echo "标签 v${{ inputs.VERSION }} 已存在"
          echo "tag_exists=true" >> $env:GITHUB_OUTPUT
        else
          git tag v${{ inputs.VERSION }}
          echo "tag_exists=false" >> $env:GITHUB_OUTPUT
        fi
      shell: bash

    - name: Push Git tag
      if: steps.create_tag.outputs.tag_exists == 'false'
      run: |
        # 推送标签到远程仓库，并捕获可能的错误
        if ! git push origin v${{ inputs.VERSION }}; then
          echo "推送标签失败，可能已被其他进程推送"
          # 尝试获取远程标签的SHA
          REMOTE_SHA=$(git ls-remote origin refs/tags/v${{ inputs.VERSION }} | cut -f1)
          LOCAL_SHA=$(git rev-parse v${{ inputs.VERSION }})
          
          if [ "$REMOTE_SHA" = "$LOCAL_SHA" ]; then
            echo "远程标签与本地标签相同，继续发布"
          else
            echo "远程标签与本地标签不同，中止发布"
            exit 1
          fi
        fi
      shell: bash

    - name: Verify tag exists on GitHub
      run: |
        # 等待一小段时间，确保GitHub完全同步标签
        sleep 10
        
        # 验证标签是否存在
        if ! git ls-remote --tags origin v${{ inputs.VERSION }} | grep -q v${{ inputs.VERSION }}; then
          echo "标签 v${{ inputs.VERSION }} 未在GitHub上找到"
          exit 1
        fi
      shell: bash

    - name: Upload to GitHub Releases
      uses: softprops/action-gh-release@v1
      if: github.event_name == 'workflow_dispatch'
      with:
        files: ./UotanToolbox_Windows*
        tag_name: v${{ inputs.VERSION }}
        name: Uotan Toolbox v${{ inputs.VERSION }}
        body: |
          Uotan Toolbox Windows 版本 ${{ inputs.VERSION }}
          包含 x64 和 arm64 架构
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
